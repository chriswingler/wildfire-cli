name: 🚦 Code Quality Gate

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**'
      - 'tests/**'
      - '*.py'

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  coding_standards_check:
    name: Coding Standards Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black mypy bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run code quality checks
        run: |
          echo "🚦 Code Quality Gate Report" > quality_report.md
          echo "" >> quality_report.md
          echo "**Standards Reference**: [docs/coding_standards.md](https://github.com/chriswingler/wildfire-cli/blob/main/docs/coding_standards.md)" >> quality_report.md
          echo "" >> quality_report.md
          echo "### 🔍 Quality Checks" >> quality_report.md
          echo "" >> quality_report.md
          echo "| Tool | Status | Details |" >> quality_report.md
          echo "|------|--------|----------|" >> quality_report.md
          
          # Track overall status
          ALL_PASSED=true
          
          # 1. Black formatting check
          if black --check --diff src/ tests/ 2>/dev/null; then
            echo "| Black (Code Formatting) | ✅ PASS | Code formatting is consistent |" >> quality_report.md
          else
            echo "| Black (Code Formatting) | ❌ FAIL | Code formatting issues detected |" >> quality_report.md
            ALL_PASSED=false
          fi
          
          # 2. Flake8 style check
          FLAKE8_OUTPUT=$(flake8 src/ tests/ --max-line-length=120 --extend-ignore=E203,W503 2>/dev/null || true)
          if [ -z "$FLAKE8_OUTPUT" ]; then
            echo "| Flake8 (Style Guide) | ✅ PASS | No style violations found |" >> quality_report.md
          else
            ERROR_COUNT=$(echo "$FLAKE8_OUTPUT" | wc -l)
            echo "| Flake8 (Style Guide) | ❌ FAIL | $ERROR_COUNT style violations detected |" >> quality_report.md
            ALL_PASSED=false
          fi
          
          # 3. MyPy type checking
          MYPY_OUTPUT=$(mypy src/ --ignore-missing-imports 2>/dev/null || true)
          if echo "$MYPY_OUTPUT" | grep -q "error:"; then
            ERROR_COUNT=$(echo "$MYPY_OUTPUT" | grep -c "error:" || echo "0")
            echo "| MyPy (Type Checking) | ⚠️ WARN | $ERROR_COUNT type issues detected |" >> quality_report.md
          else
            echo "| MyPy (Type Checking) | ✅ PASS | No type errors found |" >> quality_report.md
          fi
          
          # 4. Bandit security check
          BANDIT_OUTPUT=$(bandit -r src/ -f json 2>/dev/null || echo '{"results":[]}')
          if echo "$BANDIT_OUTPUT" | grep -q '"results"'; then
            if echo "$BANDIT_OUTPUT" | grep -q '"issue_severity": "HIGH"'; then
              echo "| Bandit (Security) | ❌ FAIL | High-severity security issues found |" >> quality_report.md
              ALL_PASSED=false
            elif echo "$BANDIT_OUTPUT" | grep -q '"results": \[.*\]'; then
              echo "| Bandit (Security) | ⚠️ WARN | Minor security issues found |" >> quality_report.md
            else
              echo "| Bandit (Security) | ✅ PASS | No security issues detected |" >> quality_report.md
            fi
          else
            echo "| Bandit (Security) | ✅ PASS | No security issues detected |" >> quality_report.md
          fi
          
          # Add summary
          echo "" >> quality_report.md
          if [ "$ALL_PASSED" = true ]; then
            echo "### ✅ All Quality Checks Passed!" >> quality_report.md
            echo "This code meets our coding standards." >> quality_report.md
          else
            echo "### ⚠️ Quality Issues Detected" >> quality_report.md
            echo "Please address the failed checks above." >> quality_report.md
            exit 1
          fi
          
          # Output the report
          cat quality_report.md

  educational_content_review:
    name: Educational Content Review
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'src/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Review educational value
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Check if this PR enhances educational value
            let educationalReview = "## 🎓 Educational Content Review\n\n";
            
            const prTitle = context.payload.pull_request.title;
            const prBody = context.payload.pull_request.body || '';
            
            // Educational criteria
            let educationalScore = 0;
            let feedback = [];
            
            // Check PR description for educational context
            const educationalKeywords = [
              'ics', 'incident command', 'wildfire', 'firefighting', 
              'tactical', 'operational', 'educational', 'learning',
              'authentic', 'realistic', 'training'
            ];
            
            for (const keyword of educationalKeywords) {
              if (prTitle.toLowerCase().includes(keyword) || prBody.toLowerCase().includes(keyword)) {
                educationalScore++;
              }
            }
            
            if (educationalScore >= 2) {
              feedback.push("✅ PR demonstrates clear educational value");
            } else {
              feedback.push("💡 Consider explaining the educational benefit of this change");
            }
            
            // Check for authentic terminology usage
            if (prBody.includes('ICS') || prBody.includes('incident command')) {
              feedback.push("✅ Uses authentic wildfire management terminology");
            }
            
            // Check for learning objective alignment
            if (prBody.includes('learn') || prBody.includes('teach') || prBody.includes('understand')) {
              feedback.push("✅ Explicitly addresses learning objectives");
            }
            
            educationalReview += `### 📚 Educational Criteria Check\n\n`;
            for (const item of feedback) {
              educationalReview += `- ${item}\n`;
            }
            
            educationalReview += `\n### 🎯 Educational Standards\n\n`;
            educationalReview += `This project teaches authentic wildfire incident command:\n`;
            educationalReview += `- **Real ICS protocols** and terminology\n`;
            educationalReview += `- **Tactical decision-making** with consequences\n`;
            educationalReview += `- **Resource management** principles\n`;
            educationalReview += `- **Professional practices** from real emergency management\n\n`;
            
            educationalReview += `### 💡 Educational Enhancement Suggestions\n\n`;
            educationalReview += `- Use authentic wildfire/ICS terminology in code and comments\n`;
            educationalReview += `- Include educational context in complex algorithms\n`;
            educationalReview += `- Explain real-world basis for game mechanics\n`;
            educationalReview += `- Consider learning outcomes when designing features\n\n`;
            
            educationalReview += `---\n`;
            educationalReview += `*Educational review ensures authentic learning value*`;
            
            // Only post if there are meaningful educational aspects to review
            if (educationalScore > 0 || feedback.length > 1) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: educationalReview
              });
            }
            
            console.log(`Educational review completed (score: ${educationalScore})`);