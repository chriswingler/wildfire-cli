name: ✅ Simple Project Automation

on:
  issues:
    types: [opened, closed]
  pull_request:
    types: [opened, closed]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  basic_automation:
    name: Basic Project Automation
    runs-on: ubuntu-latest
    steps:
      - name: Auto-label new issues
        if: github.event.action == 'opened' && github.event.issue
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const title = context.payload.issue.title.toLowerCase();
              const labels = [];
              
              // Simple auto-labeling based on title keywords
              if (title.includes('fire') || title.includes('simulation')) {
                labels.push('game-engine');
              }
              if (title.includes('ui') || title.includes('interface')) {
                labels.push('ui-ux');
              }
              if (title.includes('test')) {
                labels.push('architecture');
              }
              if (title.includes('content') || title.includes('scenario')) {
                labels.push('content');
              }
              if (title.includes('doc')) {
                labels.push('documentation');
              }
              
              if (labels.length > 0) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.issue.number,
                  labels: labels
                });
                console.log(`Added labels: ${labels.join(', ')}`);
              }
            } catch (error) {
              console.log(`Error adding labels: ${error.message}`);
            }

      - name: Sprint progress update
        if: github.event.action == 'closed' && github.event.issue
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Find sprint planning issues to update
              const { data: sprintIssues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'sprint-planning',
                state: 'open'
              });
              
              const issueNumber = context.payload.issue.number;
              const issueTitle = context.payload.issue.title;
              
              for (const sprintIssue of sprintIssues) {
                // Check if closed issue is mentioned in sprint backlog
                if (sprintIssue.body && sprintIssue.body.includes(`#${issueNumber}`)) {
                  const comment = `## ✅ Sprint Progress Update
                  
Issue #${issueNumber} "${issueTitle}" has been completed!

**Status:** Closed  
**Completed:** ${new Date().toLocaleDateString()}

---
*Automated sprint tracking*`;

                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: sprintIssue.number,
                    body: comment
                  });
                  
                  console.log(`Updated sprint issue #${sprintIssue.number}`);
                }
              }
            } catch (error) {
              console.log(`Error updating sprint progress: ${error.message}`);
            }

      - name: PR automation
        if: github.event.pull_request
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const prNumber = context.payload.pull_request.number;
              const prTitle = context.payload.pull_request.title;
              const prAction = context.payload.action;
              
              console.log(`PR #${prNumber} "${prTitle}" was ${prAction}`);
              
              // Simple PR logging for now
              // Can be expanded later for more complex automation
              
            } catch (error) {
              console.log(`Error in PR automation: ${error.message}`);
            }