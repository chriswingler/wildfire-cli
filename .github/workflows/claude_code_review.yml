name: ü§ñ Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**'
      - 'tests/**'
      - '*.py'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  claude_review:
    name: Claude Code Standards Review
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            src/**/*.py
            tests/**/*.py
            *.py

      - name: Claude Code Review
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read our coding standards
            const codingStandards = fs.readFileSync('./docs/coding_standards.md', 'utf8');
            
            // Get the changed files
            const changedFiles = `${{ steps.changed-files.outputs.all_changed_files }}`.split(' ');
            
            // Read the PR details
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
            const prBody = context.payload.pull_request.body || '';
            
            let reviewComments = [];
            let codeAnalysis = "## ü§ñ Claude Code Review\n\n";
            codeAnalysis += `**PR:** ${prTitle}\n`;
            codeAnalysis += `**Changed Files:** ${changedFiles.length}\n\n`;
            
            // Analyze each changed Python file
            for (const file of changedFiles) {
              if (file.endsWith('.py')) {
                try {
                  const fileContent = fs.readFileSync(file, 'utf8');
                  const lines = fileContent.split('\n');
                  
                  // Check against our coding standards
                  let issues = [];
                  
                  // 1. Check function length (max 60 lines per standard)
                  let currentFunction = null;
                  let functionStartLine = 0;
                  let indentLevel = 0;
                  
                  for (let i = 0; i < lines.length; i++) {
                    const line = lines[i];
                    const trimmed = line.trim();
                    
                    // Detect function definitions
                    if (trimmed.startsWith('def ') && trimmed.includes('(')) {
                      if (currentFunction) {
                        const functionLength = i - functionStartLine;
                        if (functionLength > 60) {
                          issues.push(`‚ö†Ô∏è Function '${currentFunction}' is ${functionLength} lines (max: 60 lines per coding standards)`);
                        }
                      }
                      currentFunction = trimmed.split('(')[0].replace('def ', '');
                      functionStartLine = i;
                    }
                  }
                  
                  // Check final function
                  if (currentFunction) {
                    const functionLength = lines.length - functionStartLine;
                    if (functionLength > 60) {
                      issues.push(`‚ö†Ô∏è Function '${currentFunction}' is ${functionLength} lines (max: 60 lines per coding standards)`);
                    }
                  }
                  
                  // 2. Check file length (max 1000 lines per standard)
                  if (lines.length > 1000) {
                    issues.push(`‚ö†Ô∏è File is ${lines.length} lines (max: 1000 lines per coding standards)`);
                  }
                  
                  // 3. Check for descriptive naming
                  const badVariableNames = [];
                  for (let i = 0; i < lines.length; i++) {
                    const line = lines[i];
                    // Look for single letter variables (except common iterators)
                    const singleLetters = line.match(/\b[a-z]\s*=/g);
                    if (singleLetters) {
                      for (const match of singleLetters) {
                        const varName = match.replace(/\s*=/, '');
                        if (!['i', 'j', 'k', 'x', 'y', 'z'].includes(varName)) {
                          badVariableNames.push(`Line ${i + 1}: Variable '${varName}' - use descriptive names`);
                        }
                      }
                    }
                  }
                  
                  if (badVariableNames.length > 0) {
                    issues.push(`‚ö†Ô∏è Non-descriptive variable names:\n${badVariableNames.slice(0, 3).join('\n')}`);
                  }
                  
                  // 4. Check for proper error handling
                  const hasExceptions = fileContent.includes('try:') || fileContent.includes('except:');
                  const hasRaises = fileContent.includes('raise ');
                  if (fileContent.includes('def ') && !hasExceptions && !hasRaises && file.includes('src/')) {
                    issues.push(`üí° Consider adding error handling (try/except blocks) per coding standards`);
                  }
                  
                  // 5. Check for comments on complex logic
                  const complexPatterns = [
                    /for.*for.*in/,  // Nested loops
                    /if.*and.*or/,   // Complex conditions
                    /lambda.*lambda/, // Nested lambdas
                  ];
                  
                  let needsComments = false;
                  for (let i = 0; i < lines.length; i++) {
                    const line = lines[i];
                    for (const pattern of complexPatterns) {
                      if (pattern.test(line) && !lines[i-1]?.trim().startsWith('#')) {
                        needsComments = true;
                        break;
                      }
                    }
                  }
                  
                  if (needsComments) {
                    issues.push(`üí° Complex logic detected - consider adding explanatory comments per coding standards`);
                  }
                  
                  // Add file analysis to review
                  if (issues.length > 0) {
                    codeAnalysis += `### üìÑ \`${file}\`\n`;
                    for (const issue of issues) {
                      codeAnalysis += `- ${issue}\n`;
                    }
                    codeAnalysis += '\n';
                  } else {
                    codeAnalysis += `### ‚úÖ \`${file}\` - Looks good!\n\n`;
                  }
                  
                } catch (error) {
                  console.log(`Could not analyze ${file}: ${error.message}`);
                }
              }
            }
            
            // Add coding standards summary
            codeAnalysis += `## üìã Coding Standards Summary\n\n`;
            codeAnalysis += `Based on [docs/coding_standards.md](https://github.com/chriswingler/wildfire-cli/blob/main/docs/coding_standards.md):\n\n`;
            codeAnalysis += `### ‚úÖ Key Requirements\n`;
            codeAnalysis += `- **Functions**: Max 60 lines, single responsibility\n`;
            codeAnalysis += `- **Files**: Max 1000 lines, grouped by functionality\n`;
            codeAnalysis += `- **Naming**: Descriptive and unambiguous names\n`;
            codeAnalysis += `- **Comments**: Explain complex logic and intent\n`;
            codeAnalysis += `- **Error Handling**: Use exceptions, provide context\n`;
            codeAnalysis += `- **Testing**: Write tests close to production code\n\n`;
            
            codeAnalysis += `### üéØ Core Principles\n`;
            codeAnalysis += `- **KISS**: Keep it simple, stupid\n`;
            codeAnalysis += `- **DRY**: Don't repeat yourself\n`;
            codeAnalysis += `- **YAGNI**: You aren't gonna need it\n`;
            codeAnalysis += `- **Single Responsibility**: Each function/class does one thing well\n\n`;
            
            codeAnalysis += `### üîç This Review Checked\n`;
            codeAnalysis += `- Function length compliance\n`;
            codeAnalysis += `- File size limits\n`;
            codeAnalysis += `- Variable naming conventions\n`;
            codeAnalysis += `- Error handling patterns\n`;
            codeAnalysis += `- Complex logic documentation\n\n`;
            
            codeAnalysis += `---\n`;
            codeAnalysis += `*Automated review by Claude based on project coding standards*`;
            
            // Post the review as a comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: codeAnalysis
            });
            
            console.log('Claude code review completed');

      - name: Check for wildfire-specific patterns
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Wildfire-specific coding patterns to check
            const changedFiles = `${{ steps.changed-files.outputs.all_changed_files }}`.split(' ');
            let wildfireIssues = [];
            
            for (const file of changedFiles) {
              if (file.endsWith('.py')) {
                try {
                  const fileContent = fs.readFileSync(file, 'utf8');
                  
                  // Check for wildfire-specific violations
                  
                  // 1. No visual grid display (critical for our architecture)
                  if (fileContent.includes('print') && (fileContent.includes('grid') || fileContent.includes('map'))) {
                    const lines = fileContent.split('\n');
                    for (let i = 0; i < lines.length; i++) {
                      if (lines[i].includes('print') && (lines[i].includes('grid') || lines[i].includes('map'))) {
                        wildfireIssues.push(`üö´ **Critical**: ${file}:${i+1} - No visual grid display allowed per architecture`);
                      }
                    }
                  }
                  
                  // 2. Check for authentic ICS terminology usage
                  const icsTerms = ['incident', 'command', 'operational', 'tactical', 'resource', 'deployment'];
                  let hasIcsTerms = false;
                  for (const term of icsTerms) {
                    if (fileContent.toLowerCase().includes(term)) {
                      hasIcsTerms = true;
                      break;
                    }
                  }
                  
                  if (file.includes('src/game/') && !hasIcsTerms) {
                    wildfireIssues.push(`üí° Consider using authentic ICS terminology in game logic files`);
                  }
                  
                  // 3. Check for proper Rich library usage (no direct print statements)
                  if (file.includes('src/ui/') && fileContent.includes('print(') && !fileContent.includes('console.print')) {
                    wildfireIssues.push(`üé® Use Rich library (console.print) instead of print() in UI files`);
                  }
                  
                  // 4. Check for educational value in comments
                  if (file.includes('src/game/') && fileContent.includes('def ')) {
                    const hasEducationalComments = fileContent.includes('real') || 
                                                 fileContent.includes('authentic') || 
                                                 fileContent.includes('ICS') || 
                                                 fileContent.includes('wildfire');
                    if (!hasEducationalComments) {
                      wildfireIssues.push(`üìö Consider adding educational context in comments for game logic`);
                    }
                  }
                  
                } catch (error) {
                  console.log(`Could not analyze ${file} for wildfire patterns: ${error.message}`);
                }
              }
            }
            
            // Post wildfire-specific review if issues found
            if (wildfireIssues.length > 0) {
              let wildfireReview = `## üî• Wildfire-Specific Code Review\n\n`;
              wildfireReview += `### üéØ Project-Specific Standards\n\n`;
              
              for (const issue of wildfireIssues) {
                wildfireReview += `- ${issue}\n`;
              }
              
              wildfireReview += `\n### üèóÔ∏è Architecture Reminders\n`;
              wildfireReview += `- **No Visual Grid**: Fire simulation internal only, never displayed\n`;
              wildfireReview += `- **Authentic ICS**: Use real incident command terminology\n`;
              wildfireReview += `- **Rich UI Only**: Use Rich library for all terminal output\n`;
              wildfireReview += `- **Educational Focus**: Code should teach real wildfire management\n\n`;
              wildfireReview += `See [Architecture Overview](https://github.com/chriswingler/wildfire-cli/wiki/Architecture-Overview) for details.\n\n`;
              wildfireReview += `---\n`;
              wildfireReview += `*Wildfire-specific review by Claude*`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: wildfireReview
              });
            }
            
            console.log('Wildfire-specific review completed');